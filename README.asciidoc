= Interview Exercise - MarsRobots
Bill Turner
:toc:
:toc-placement!:

toc::[]

== Requirements ==

. The problem below requires some kind of input. You are free to implement any mechanism for
feeding input into your solution (for example, using hard coded data within a unit test). You
should provide sufficient evidence that your solution is complete by, as a minimum, indicating
that it works correctly against the supplied test data.

. We highly recommend using a unit testing framework such as JUnit or NUnit. Even if you have
not used it before, it is simple to learn and incredibly useful.

. The code you write should be of production quality, and most importantly, it should be code
you are proud of.

. We recommend you *spend no more than 2 hours* on this task.


=== MARS ROBOTS ===

. A squad of robotic rovers are to be landed by NASA on a plateau on Mars.

. This plateau, which is curiously rectangular, must be navigated by the rovers so that their
on board cameras can get a complete view of the surrounding terrain to send back to Earth.

. A rover's position is represented by a combination of an x and y co-ordinates and a letter
representing one of the four cardinal compass points. The plateau is divided up into a grid to
simplify navigation. An example position might be 0, 0, N, which means the rover is in the bottom
left corner and facing North.
. In order to control a rover, NASA sends a simple string of letters. The possible letters are
'L', 'R' and 'M'. 'L' and 'R' makes the rover spin 90 degrees left or right respectively, without
moving from its current spot.

. 'M' means move forward one grid point, and maintain the same heading.

. Assume that the square directly North from (x, y) is (x, y+1).

=== Input ===

. The first line of input is the upper-right coordinates of the plateau, the lower-left
coordinates are assumed to be 0,0.

. The rest of the input is information pertaining to the rovers that have been deployed. Each
rover has two lines of input. The first line gives the rover's position, and the second line is
a series of instructions telling the rover how to explore the plateau.

. The position is made up of two integers and a letter separated by spaces, corresponding to
the x and y co-ordinates and the rover's orientation.

. Each rover will be finished sequentially, which means that the second rover won't start to
move until the first one has finished moving.

=== Output ===

The output for each rover should be its final co-ordinates and heading.

=== Testing ===

*Test Input*

5 5

1 2 N

LMLMLMLMM

3 3 E

MMRMMRMRRM

*Expected Output*

1 3 N

5 1 E

== Architecture Overview ==

This application was originally developed in 2009, shortly after I first started using Groovy. The statements
made herein, where applicable, are to the best of my recollection.

. It was developed using the Intellij IDEA (Maia #10781).
. Test classes use GroovyTestCase included with Groovy 1.7.1.
. All tests and the Main class were run via the IDE. No Ant, Gant, Gradle, etc., file has been created.
. Main is a crude version of client that demonstrates the minimum requirements are met as set forth in the document.

Not having access to the user/analyst, choices had to be made. I thought about using a factory for
creating the robots, and, in a sense, I did, but thought that the true factory pattern was overkill
for this task. It seemed to violate the YAGNI principle of Agile development. Likewise, there is a
lack of any sort of user interface for real time interaction with robots. That said, some choices
were made based upon likely changes. Probable addition of terrain features that would make certain
grid points inaccessible is but one.

Another design choice was to not prevent two robots from occupying the same grid. My understanding is
that a grid cell is large enough to allow more than one robot in it at the same time. No test for
collisions are necessary for this purpose.

I thought about having the Coordinates class decorate Point, but this seemed like a pretty simplistic
application and this felt like overkill. It might even be more confusing.

I look forward to discussing this application and the choices made with anyone who has interest.

=== Technology Stack ===
Below is a list of technologies used in the development of Activity.

* Groovy 1.7.1.

== Getting Started ==
[to be written]

== Disclaimer ==
All applications can be solved in a myriad of ways. I believed that what was wanted was something
that not only worked, but also:

. Demonstrated design skills
. Demonstrated knowledge of Groovy
. Demonstrated knowledge of unit testing


include::STYLE_GUIDE.asciidoc[]

include::TODO.asciidoc[]
